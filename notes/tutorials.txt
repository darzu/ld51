From the Portal guys:
    You really want the player to figure it out instead of you telling them
    they remember it better, and have the epiphony moment
    get rid of false negatives: 
        make sure they know when they didn't get it
        make sure they get it when they should have
    new mechanic:
        introduction -> saturation -> graduation -> combination

Vids from CS50:
    https://www.youtube.com/channel/UCcabW7890RKJzL968QWEykA

Each feature we add:
    step 1. exploration: from the simple-cube example (or other minimal dependencies), build the feature
    step 2. implementation: take what we've learned, apply it to our existing system
    step 3. edge cases, debugging, clean up

Starting out at Sprigland:
  """
  Welcome to Sprigland!
  Some people come here to make games.
  Some people come here to draw, sculpt, or program art.
  Here's your backpack!
  What would you like to do first?
    Play some games
    Draw art
    Make a game
  In your backpack are leafs of art, pages of code, and acordion folders to organize it all.
  """

Interactive, python notebook style tutorials.
  Interactive windows that could show game, code, or both
  We'd smartly share engine code and pause play canvases as needed
  Have gif and code-blob fallback

For program slicing:
  in addition to statically culling and inlining engine stuff to make a 
  compact example, you can also run the example and track which branches 
  are taken. If they're not used, cull them. This would remove a lot of 
  the edge case code and error handling that might muddy the core example 
  concepts.

  terms: tree shaking, program slicing,

For every complex topic that someone is stuck on, there are 1-2 
  sentences that if they heard would unblock their learning.

Free "The Essential Web Developer Course":
  https://upskillcourses.com/courses/essential-web-developer-course

/r/learnprogramming (3.3m members) recommends "How to Learn to Code":
  https://www.youtube.com/watch?v=mvK0UzFNw1Q

about teaching CS for non-techies:
  http://teachtogether.tech/en/index.html

"14 year old wanting to get into game dev. Couple questions.":
  https://www.reddit.com/r/gamedev/comments/wgo35u/14_year_old_wanting_to_get_into_game_dev_couple/
  The first point they make is: "I want to use ue5 because I feel the “ceiling” of what you can do is much higher"
    This is why it's so important for beginner-friendly game engines to have high ceilings! People aren't stupid, they don't want to invest in something that is ultimately not going to let them reach their goals.
    